ID	Title	AuthorList	Description
[BD96]	Checking for Race Conditions in File Accesses	Matt Bishop, Michael Dilger. Computing Systems 9:2, 1996. 	A great description of the TOCTTOU problem and its presence in ﬁle systems.
[CK+08]	The xv6 Operating System	Russ Cox, Frans Kaashoek, Robert Morris, Nickolai Zeldovich. From: https://github.com/mit-pdos/xv6-public. 	As mentioned before, a cool and simple Unix implementation. We have been using an older version (2012-01-30-1-g1c41342) and hence some examples in the book may not match the latest in the source.
[H+18]	TxFS: Leveraging File-System Crash Consistency to Provide ACID Transactions	Y. Hu, Z. Zhu, I. Neal, Y. Kwon, T. Cheng, V. Chidambaram, E. Witchel. USENIX ATC ’18, June 2018. 	The best paper at USENIX ATC ’18, and a good recent place to start to learn about transactional ﬁle systems.
[K84]	Processes as Files	Tom J. Killian. USENIX, June 1984. 	The paper that introduced the /proc ﬁle system, where each process can be treated as a ﬁle within a pseudo ﬁle system. A clever idea that you can still see in modern U NIX systems.
[L84]	Capability-Based Computer Systems	Henry M. Levy. Digital Press, 1984. Available: http://homes.cs.washington.edu/˜levy/capabook. 	An excellent overview of early capability-based systems.
[MJLF84]	A Fast File System for U NIX	Marshall K. McKusick, William N. Joy, Sam J. Lefﬂer, Robert S. Fabry. ACM TOCS, 2:3, August 1984. 	We’ll talk about the Fast File System (FFS) explicitly later on. Here, we refer to it because of all the other random fun things it introduced, like long ﬁle names and symbolic links. Sometimes, when you are building a system to improve one thing, you improve a lot of other things along the way.
[P+13]	Towards Efﬁcient, Portable Application-Level Consistency	Thanumalayan S. Pillai, Vijay Chidambaram, Joo-Young Hwang, Andrea C. Arpaci-Dusseau, and Remzi H. ArpaciDusseau. HotDep ’13, November 2013. 	Our own work that shows how readily applications can make mistakes in committing data to disk; in particular, assumptions about the ﬁle system creep into applications and thus make the applications work correctly only if they are running on a speciﬁc ﬁle system.
[P+14]	All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications	Thanumalayan S. Pillai, Vijay Chidambaram, Ramnatthan Alagappan, Samer Al-Kiswany, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau. OSDI ’14, Broomﬁeld, Colorado, October 2014. 	The full conference paper on this topic – with many more details and interesting tidbits than the ﬁrst workshop paper above.
[SK09]	Principles of Computer System Design	Jerome H. Saltzer and M. Frans Kaashoek. Morgan-Kaufmann, 2009. 	This tour de force of systems is a must-read for anybody interested in the ﬁeld. It’s how they teach systems at MIT. Read it once, and then read it a few more times to let it all soak in.
[SR05]	Advanced Programming in the U NIX Environment	W. Richard Stevens and Stephen A. Rago. Addison-Wesley, 2005. 	We have probably referenced this book a few hundred thousand times. It is that useful to you, if you care to become an awesome systems programmer.
[T+08]	Portably Solving File TOCTTOU Races with Hardness Ampliﬁcation	D. Tsafrir, T. Hertz, D. Wagner, D. Da Silva. FAST ’08, San Jose, California, 2008. 	Not the paper that introduced TOCTTOU, but a recent-ish and well-done description of the problem and a way to solve the problem in a portable manner.